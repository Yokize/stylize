@use '~@stylize/sass-func/meta'
@use '~@stylize/sass-func/list'
@use '~@stylize/sass-func/math' as *
@use '~@stylize/sass-mixin/size' as *

////
/// @group triangle
/// @author Nojukubi
////

/// Mixin to create the triangle shape.
/// @param {List} $props - Triangle Props.
/// @example
///   @include triangle(top #fff 5px)
///   @include triangle(top #fff 5px 10px)
@mixin triangle($props: [])

/// Mixin to create the triangle shape.
/// @param {List|String} $direction - Direction.
/// @param {Color} $color [null] - Color.
/// @param {Length} $width [null] - Width.
/// @param {Length} $height [null] - Height.
/// @example
///   @include triangle(top, #fff, 5px)
///   @include triangle(top, #fff, 5px, 10px)
@mixin triangle($direction, $color: null, $width: null, $height: null)
  @if list.has-multiple($direction)
    @include -triangle-($direction...)
  @else
    @include -triangle-($direction, $color, $width, $height)

/// Internal mixin create the triangle shape.
/// @param {String} $direction - Direction.
/// @param {Color} $color [null] - Color.
/// @param {Length} $width [null] - Width.
/// @param {Length} $height [null] - Height.
/// @ignore
@mixin -triangle-($direction, $color: null, $width: null, $height: null)
  @include size(0, 0)
  border-style: solid

  @if $height == null
    @if list.contains($-equal-dir-, $direction)
      $height: to-fixed(sqrt(sqr($width) - sqr(div($width, 2))), 4)
    @else
      $height: $width

  // Logic for each individual direction.
  @if $direction == 'top'
    @include -top-triangle-($color, $width, $height)
  @else if $direction == 'bottom'
    @include -bottom-triangle-($color, $width, $height)
  @else if $direction == 'right'
    @include -right-triangle-($color, $width, $height)
  @else if $direction == 'left'
    @include -left-triangle-($color, $width, $height)
  @else if $direction == 'top-left'
    @include -top-left-triangle-($color, $width, $height)
  @else if $direction == 'top-right'
    @include -top-right-triangle-($color, $width, $height)
  @else if $direction == 'bottom-left'
    @include -bottom-left-triangle-($color, $width, $height)
  @else if $direction == 'bottom-right'
    @include -bottom-right-triangle-($color, $width, $height)
  @else
    @error 'Direction `#{$direction}` is not supported'

// Directions which need an equalize.
$-equal-dir-: top, bottom, left, right

// Mixin to create top triangle shape.
@mixin -top-triangle-($color, $width, $height)
  border-color: transparent transparent $color transparent
  border-width: 0 div($width, 2) $height div($width, 2)

// Mixin to create top left triangle shape.
@mixin -top-left-triangle-($color, $width, $height)
  border-color: $color transparent transparent transparent
  border-width: $height $width 0 0

// Mixin to create top right triangle shape.
@mixin -top-right-triangle-($color, $width, $height)
  border-color: transparent $color transparent transparent
  border-width: 0 $width $height 0

// Mixin to create bottom triangle shape.
@mixin -bottom-triangle-($color, $width, $height)
  border-color: $color transparent transparent transparent
  border-width: $height div($width, 2) 0 div($width, 2)

// Mixin to create bottom left triangle shape.
@mixin -bottom-left-triangle-($color, $width, $height)
  border-color: transparent transparent transparent $color
  border-width: $height 0 0 $width

// Mixin to create bottom right triangle shape.
@mixin -bottom-right-triangle-($color, $width, $height)
  border-color: transparent transparent $color transparent
  border-width: 0 0 $height $width

// Mixin to create right triangle shape.
@mixin -right-triangle-($color, $width, $height)
  border-color: transparent transparent transparent $color
  border-width: div($width, 2) 0 div($width, 2) $height

// Mixin to create left triangle shape.
@mixin -left-triangle-($color, $width, $height)
  border-color: transparent $color transparent transparent
  border-width: div($width, 2) $height div($width, 2) 0
