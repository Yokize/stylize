@use 'sass:list';

/// Shorthand mixin for absolute position
/// @require {mixin} _position_
/// @param {List} $offsets - Offsets
/// @group position
/// @example
///   @include absolute
///   @include absolute(0, null, 0);
@mixin absolute($offsets: []) {
  @include _position_(absolute, $offsets);
}

/// Shorthand mixin for absolute position
/// @require {mixin} _position_
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
/// @group position
/// @example
///   @include absolute
///   @include absolute(0, null, 0);
@mixin absolute($top: null, $right: null, $bottom: null, $left: null) {
  @include _position_(absolute, $top, $right, $bottom, $left);
}

/// Shorthand mixin for fixed position
/// @require {mixin} _position_
/// @param {List} $offsets - Offsets
/// @group position
/// @example
///   @include fixed
///   @include fixed(0 null 0);
@mixin fixed($offsets: []) {
  @include _position_(fixed, $offsets);
}

/// Shorthand mixin for fixed position
/// @require {mixin} _position_
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
/// @group position
/// @example
///   @include fixed
///   @include fixed(0, null, 0);
@mixin fixed($top: null, $right: null, $bottom: null, $left: null) {
  @include _position_(fixed, $top, $right, $bottom, $left);
}

/// Shorthand mixin for relative position
/// @require {mixin} _position_
/// @param {List} $offsets - Offsets
/// @group position
/// @example
///   @include relative
///   @include relative(0 null 0);
@mixin relative($offsets: []) {
  @include _position_(relative, $offsets);
}

/// Shorthand mixin for relative position
/// @require {mixin} _position_
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
/// @group position
/// @example
///   @include relative
///   @include relative(0, null, 0);
@mixin relative($top: null, $right: null, $bottom: null, $left: null) {
  @include _position_(relative, $top, $right, $bottom, $left);
}

/// Shorthand mixin for sticky position
/// @require {mixin} _position_
/// @param {List} $offsets - Offsets
/// @group position
/// @example
///   @include sticky
///   @include sticky(0 null 0);
@mixin sticky($offsets: []) {
  @include _position_(sticky, $offsets);
}

/// Shorthand mixin for sticky position
/// @require {mixin} _position_
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
/// @group position
/// @example
///   @include sticky
///   @include sticky(0)
///   @include sticky(0, null, 0);
@mixin sticky($top: null, $right: null, $bottom: null, $left: null) {
  @include _position_(sticky, $top, $right, $bottom, $left);
}

/// Internal function to generate position property
/// @param {String} $position - Position (`relative`, `absolute`, etc.)
/// @param {Length | List} $top [null] - Top offset or Offsets
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
/// @group position
/// @ignore
@mixin _position_($position, $top: null, $right: null, $bottom: null, $left: null) {
  @if (list.length($top) > 1) {
    @include _position_($position, $top...);
  } @else {
    position: $position;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
  }
}
