@use '~@stylize/sass-func/list'
@use '~@stylize/sass-func/map'
@use '~@stylize/sass-func/meta'
@use '~@stylize/sass-func/math'
@use '~@stylize/sass-func/number'
@use '~@stylize/sass-func/string'
@use '~@stylize/sass-func/unit'

////
/// @group media
/// @author Nojukubi
/// @source https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries
////

/// Media queries are useful to modify site or application depending
/// on the general type of device (e.g., print vs screen) or specific
/// characteristics and parameters (e.g., screen resolution or browser
/// viewport width). Media query is composed of an optional media type
/// and any number of media feature expressions. Multiple queries can
/// be combined in various ways by using logical operators.

/// Internal cache.
/// @type Map
$-cache-: ()

/// Symbol `less than`.
/// @type String
$-symbol-lt-: '<'

/// Symbol `greater than`.
/// @type String
$-symbol-gt-: '>'

/// Config `equals to`.
/// @type Map
$-config-eq-: (ops: ['=' ':'], prefix: null)

/// Config `less than or equal to`.
/// @type Map
$-config-lt-: (ops: ['<=' '≤' $-symbol-lt-], prefix: max)

/// Config `greater than or equal to`.
/// @type Map
$-config-gt-: (ops: ['>=' '≥' $-symbol-gt-], prefix: min)

/// Create the media query based on the raw data.
/// @param {Map|List|String} $data Raw data.
/// @return {String} Native media query.
/// @throws Unknown media condition.
@function -create-query-($data)
  @if meta.is-map($data)
    // Create the media query from the map.
    @return -create-query-map-($data)
  @else if meta.is-list($data)
    // Create the media query from the list.
    @return -create-query-list-($data)
  @else if meta.is-string($data)
    @if map.has-key($-cache-, $data)
      // Media query from cache with results.
      @return map.get($-cache-, $data)
    @else if map.has-key($shortcuts, $data)
      // Media query from hardcoded shortcuts.
      @return map.get($shortcuts, $data)
    @else
      // Parse media query from specified string.
      @return -create-query-str-($data)
  @else
    @error 'Unknown media condition: `#{$data}`'

/// Create the media query based on the raw map.
/// @param {Map} $data Raw data.
/// @return {String} Native media query.
@function -create-query-map-($data)
  $query: []
  @each $chunk in map.values($data)
    $query: list.append($query, -create-query-($chunk))
  @return list.to-string($query, ', ')

/// Create the media query based on the raw list.
/// @param {List} $data Raw data.
/// @return {String} Native media query.
@function -create-query-list-($data)
  $query: []
  @each $chunk in $data
    $query: list.append($query, -create-query-($chunk))
  @return list.to-string($query, ' and ')

/// Create the media query based on the raw string.
/// @param {String} $data Raw data.
/// @return {String} Native media query.
@function -create-query-str-($data)
  // Unquote string for correct parse.
  $data: string.unquote($data)
  // Get the operator from raw string.
  $operator: -get-operator-($data)
  // Further parse in case operator exist.
  @if map.has-key($operator, index)
    // Get the prefix for media condition.
    $prefix: map.get($operator, prefix)
    // Get the value of the media feature.
    $value: -get-value-($data, $operator)
    // Get the name of the supported media feature.
    $feature: -get-feature-($data, $operator)
    // Create the native media condition based on args.
    $condition: -create-condition-($prefix, $feature, $value)
    // Add media condition to cache to improve performance.
    $-cache-: map.set($-cache-, $data, $condition) !global
    // Returns the newly created native media query condition.
    @return $condition
  // In case the operator not found just return string as is.
  @return $data

/// Create the media condition based on args.
/// @param {String} $prefix Feature prefix.
/// @param {String} $feature Feature name.
/// @param {String} $value Feature value.
/// @return {String} Native media condition.
@function -create-condition-($prefix, $feature, $value)
  // Create the base media condition.
  $condition: '#{$feature}: #{$value}'
  // Returns condition based on the prefix.
  @if $prefix != null
    @return '(#{$prefix}-#{$condition})'
  @return '(#{$condition})'

/// Get the operator defined in the condition.
/// @param {String} $condition Condition.
/// @return {Map} Operator meta.
@function -get-operator-($condition)
  $found: ()
  @each $config in $-config-lt-, $-config-gt-, $-config-eq-
    @each $operator in map.get($config, ops)
      // In case already found break the loop.
      @if map.has-key($found, index)
        @return $found
      // Try to find the index of the operator.
      $index: string.index($condition, $operator)
      // In case found the operator gather data.
      @if $index != null
        $found: map.set($found, index, $index)
        $found: map.set($found, symbol, $operator)
        $found: map.set($found, prefix, map.get($config, prefix))
        $found: map.set($found, length, string.length($operator))
  // In case not found just return the empty map.
  @return $found

/// Get the media feature defined in the condition.
/// @param {String} $condition Condition.
/// @param {Map} $operator Operator meta.
/// @return {String} Feature name.
@function -get-feature-($condition, $operator)
  $feature: width
  @if map.get($operator, index) > 1
    // Start index of the first feature character.
    $index: map.get($operator, index) - 1
    // Sliced and trimmed $keyword or native feature.
    $parsed: string.trim(string.slice($condition, 1, $index))
    // In case the feature is not found use the default.
    $feature: if(string.length($parsed), $parsed, $feature)
  @if map.has-key($keywords, $feature)
    @return map.get($keywords, $feature)
  @return $feature

/// Get media value defined in the condition.
/// @param {String} $condition Condition.
/// @param {Map} $operator Operator meta.
/// @return {String} Feature value.
@function -get-value-($condition, $operator)
  // Start index of the first value character.
  $index: map.get($operator, index) + map.get($operator, length)
  // Retrieved value by slicing out operator.
  $value: string.trim(string.slice($condition, $index))
  // Try to find the value in breakpoints map.
  @if map.has-key($breakpoints, $value)
    $value: map.get($breakpoints, $value)
  @else
    $parsed: number.parse($value)
    $value: if($parsed, $parsed, $value)
  // If value number need define the offset.
  @if meta.is-number($value)
    $offset: 1
    $unit: math.unit($value)
    // Predefined offsets based on the unit.
    @if map.has-key($offsets, $unit)
      $offset: map.get($offsets, $unit)
    // Offset must be applied based on operator.
    @if map.get($operator, symbol) == $-symbol-gt-
      $value: $value + $offset
    @else if map.get($operator, symbol) == $-symbol-lt-
      $value: $value - $offset
  @return $value

/// Create the media query for retina display.
/// @param {Number} $scale Retina scale.
/// @param {Number} $dpi Dpi resolution.
/// @return {String} Native media query.
@function -retina-($scale, $dpi)
  // Represents the number of dots per inch.
  $dpi: 'resolution>=#{$dpi}dpi'
  // Represents the number of dots per px unit.
  $dppx: 'resolution>=#{$scale}dppx'
  // Webkit specific device pixel ratio by scale.
  $ratio: '-webkit-min-device-pixel-ratio=#{$scale}'
  // Returns the complex media query for the retina.
  @return -create-query-((ratio: $ratio, dpi: $dpi, dppx: $dppx))

/// Create the media query for display orientation.
/// @param {Number} $orientation Orientation.
/// @return {String} Native media query.
@function -orientation-($orientation)
  // Returns the media query for orientation.
  @return -create-condition-(null, orientation, $orientation)

/// Offsets used with the lt and gt operators.
/// @type Map
$offsets: (px: 1, em: 0.01) !default

/// Predefined shortcuts for media conditions.
/// @type Map
$shortcuts: () !default

/// Predefined keywords for supported features.
/// @type Map
$keywords: (w: 'width', h: 'height') !default

/// Predefined breakpoints used with features.
/// @type Map
$breakpoints: (mc: 360px, xs: 480px, sm: 768px, md: 1024px, lg: 1200px, xl: 1440px) !default

/// Use Em instead of Px for defined breakpoints.
/// @param {Length} $base [16px] Base size.
/// @example
///   use-em
///   use-em(20px)
=use-em($base: unit.$base-size)
  @each $name, $value in $breakpoints
    @if unit.get($value) == px
      +add-breakpoint($name, unit.em($value, $base))

/// Add new keyword to already existing map.
/// @param {String} $keyword Keyword name.
/// @param {String} $feature Media feature.
/// @example
///   add-keyword(ar, aspect-ratio)
=add-keyword($keyword, $feature)
  $keywords: map.set($keywords, $keyword, $feature) !global

/// Add new shortcut to already existing map.
/// @param {String} $name Shortcut name.
/// @param {String} $condition Native query.
/// @example
///   add-shortcut(hover, '(hover: any-hover)')
=add-shortcut($name, $condition)
  $shortcuts: map.set($shortcuts, $name, $condition) !global

/// Add new breakpoint to already existing map.
/// @param {String} $name Breakpoint name.
/// @param {Number} $value Breakpoint value.
/// @example
///   add-breakpoint(tv, 4000px)
=add-breakpoint($name, $value)
  $breakpoints: map.set($breakpoints, $name, $value) !global

// Defines default shortcuts for media queries.
+add-shortcut(retina2x, -retina-(2, 192))
+add-shortcut(retina3x, -retina-(3, 350))
+add-shortcut(portrait, -orientation-(portrait))
+add-shortcut(landscape, -orientation-(landscape))

/// Shorthand mixin for media queries.
/// @param {ArgList} $conditions Conditions.
/// @content
/// @example
///    media('w>sm')
///    media('w>sm', 'h<=sm')
///    media('w>sm', 'h<=sm', portrait)
///    media((group1: screen, group2: portrait))
=media($conditions...)
  @if list.is-empty($conditions)
    @content
  @else
    // Create media query based on raw data.
    $query: -create-query-(list.first($conditions))
    // Native media `at-rule` with media query.
    @media #{$query}
      $other: list.slice($conditions, 2)
      // Nested native media with other conditions.
      +media($other...)
        @content
