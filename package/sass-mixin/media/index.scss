@use '~@stylize/sass-func/list';
@use '~@stylize/sass-func/map';
@use '~@stylize/sass-func/math';
@use '~@stylize/sass-func/meta';
@use '~@stylize/sass-func/string';

/// Media queries are useful to modify the site or application depending
/// on the general type of device (e.g., print vs screen) or specific
/// characteristics and parameters (e.g., screen resolution or browser
/// viewport width). Media query is composed of an optional media type
/// and any number of media feature expressions. Multiple queries can
/// be combined in various ways by using logical operators.
/// © MDN web docs <https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/>

/// Syntax:
/// @media [not|only] type [and] (expr) {
///   rules;
/// }

/// Operator `equal to`
/// @ignore
$-operator-equal: '=';

/// Operator `less than`
/// @ignore
$-operator-lt: '<';

/// Operator `less than` or `equal to`
/// @ignore
$-operator-lte: '<=' '≤';

/// Operator `greater than`
/// @ignore
$-operator-gt: '>';

/// Operator `greater than` or `equal to`
/// @ignore
$-operator-gte: '>=' '≥';

/// Operators to identify `less than` or `equal to`
/// @ignore
$-operator-min: list.join($-operator-lte, $-operator-lt);

/// Operators to identify `greater than` or `equal to`
/// @ignore
$-operator-max: list.join($-operator-gte, $-operator-gt);

/// Operator groups with additional metadata
/// @ignore
// prettier-ignore
$-operator-group: (
  ( operators: $-operator-min, prefix: max ),
  ( operators: $-operator-max, prefix: min ),
  ( operators: $-operator-equal, prefix: equal )
);

/// Offsets to be used with lt and gt operators
/// @author Nojukubi
/// @group media
$unit-offset: (
  '': 0,
  'px': 1,
  'em': 0.01,
  'rem': 0.1
) !default;

/// Predefined media conditions with unique keyword
/// @author Nojukubi
/// @group media
$keywords: (
  'landscape': '(orientation: landscape)',
  'portrait': '(orientation: portrait)',
  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',
  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'
) !default;

/// Media features describe specific characteristics of the
// user agent, output device, or environment.
/// @author Nojukubi
/// @group media
$features: (
  'w': 'width',
  'h': 'height',
  'o': 'orientation'
) !default;

/// Predefined breakpoints used with width media feature
/// @author Nojukubi
/// @group media
$breakpoints: (
  xs: 480px,
  sm: 768px,
  md: 1024px,
  lg: 1200px
) !default;

/// Shorthand flexible mixin for media query
/// @param {ArgList} $conditions - Conditions
/// @author Nojukubi
/// @group media
@mixin media($conditions...) {
  @if list.is-empty($conditions) {
    @content;
  } @else {
    $condition: list.first($conditions);
    // Native media at-rule with parsed condition.
    @media #{string.unquote(-parse($condition))} {
      $rest: list.slice($conditions, 2);

      @include media($rest...) {
        @content;
      }
    }
  }
}

/// Parse media query condition
/// @param {Map | List | String} $condition - Condition
/// @return {String} Parsed media condition
/// @ignore
@function -parse($condition) {
  $query: [];

  @if meta.is-map($condition) {
    $query: list.join($query, -parse-condition-map($condition));
  } @else if (meta.is-list($condition)) {
    $query: list.join($query, -parse-condition-list($condition));
  } @else if (meta.is-string($condition)) {
    @if map.has-key($keywords, $condition) {
      $query: list.append($query, map.get($keywords, $condition));
    } @else {
      $query: list.append($query, -parse-condition($condition));
    }
  } @else {
    @error 'Uknown media condition';
  }

  @return list.to-string($query, ', ');
}

/// Parse media query string condition
/// @param {String} $condition - Condition
/// @return {String} Parsed media condition
/// @ignore
@function -parse-condition($condition) {
  $feature: null;
  $operator: -get-operator($condition);

  @if map.has-key($operator, index) {
    $prefix: _get-prefix($operator);
    $feature: -get-feature($condition, $operator);
    $value: -get-value($condition, $operator);

    @if $prefix {
      @return '(#{$prefix}-#{$feature}: #{$value})';
    } @else {
      @return '(#{$feature}: #{$value})';
    }
  }

  @return $condition;
}

/// Parse media query map condition
/// @param {Map} $condition - Condition
/// @return {String} Parsed media condition
/// @ignore
@function -parse-condition-map($condition) {
  $query: [];
  @each $chunk in map.values($condition) {
    $query: list.append($query, -parse($chunk));
  }

  @return list.to-string($query, ', ');
}

/// Parse media query list condition
/// @param {List} $condition - Condition
/// @return {String} Parsed media condition
/// @ignore
@function -parse-condition-list($condition) {
  $query: [];
  @each $chunk in $condition {
    $query: list.append($query, -parse($chunk));
  }

  @return list.to-string($query, ' and ');
}

/// Get operator specified at $condition
/// @param {String} $condition - Condition
/// @return {Map} Operator meta
/// @ignore
@function -get-operator($condition) {
  $operator: ();
  @each $group in $-operator-group {
    $found: -find-operator-by-group($condition, $group);

    @if not map.has-key($operator, index) and map.has-key($found, index) {
      $operator: $found;
    }
  }

  @return $operator;
}

/// Find operator by group specified at $condition
/// @param {String} $condition - Condition
/// @return {Map} Operator meta
/// @ignore
@function -find-operator-by-group($condition, $group) {
  $found: ();
  @each $operator in map.get($group, operators) {
    @if not map.has-key($found, index) {
      $index: string.index($condition, $operator);

      @if $index != null {
        $found: map.set($found, index, $index);
        $found: map.set($found, symbol, $operator);
        $found: map.set($found, prefix, map.get($group, prefix));
        $found: map.set($found, length, string.length($operator));
      }
    }
  }

  @return $found;
}

/// Get media feature prefix based on operator
/// @param {String} $condition - Condition
/// @param {Map} $operator - Operator meta
/// @return {String} Media feature prefix
/// @ignore
@function _get-prefix($operator) {
  $prefix: map.get($operator, prefix);

  @return if($prefix == equal, null, $prefix);
}

/// Get media feature specified at $condition
/// @param {String} $condition - Condition
/// @param {Map} $operator - Operator meta
/// @return {String} Feature name
/// @ignore
@function -get-feature($condition, $operator) {
  $feature: 'width';

  @if map.get($operator, index) > 1 {
    $parsed: string.trim(string.slice($condition, 1, map.get($operator, index) - 1));
    $feature: if(string.length($parsed), $parsed, $feature);
  }

  @return if(map.has-key($features, $feature), map.get($features, $feature), $feature);
}

/// Get media value specified at $condition
/// @param {String} $condition - Condition
/// @param {Map} $operator - Operator meta
/// @return {String} Feature value
/// @ignore
@function _get-value($condition, $operator) {
  $value: string.trim(string.slice($condition, map.get($operator, index) + map.get($operator, length)));

  @if map.has-key($breakpoints, $value) {
    $value: map.get($breakpoints, $value);
  } @else {
    $parsed: math.parse($value);
    $value: if($parsed, $parsed, $value);
  }

  @if meta.is-number($value) {
    $unit: math.unit($value);
    $offset: if(map.has-key($unit-offset, $unit), map.get($unit-offset, $unit), 1);

    @if map.get($operator, symbol) == '>' {
      $value: $value + $offset;
    } @else if map.get($operator, symbol) == '<' {
      $value: $value - $offset;
    }
  }

  @return $value;
}
