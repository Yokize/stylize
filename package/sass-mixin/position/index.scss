@use '~@stylize/sass-func/list';

////
/// @group position
/// @author Nojukubi
////

/// Shorthand mixin for position property.
/// @param {List} $props - Position Props
/// @example
///   @include position(absolute)
///   @include position(absolute 0 null);
///   @include position(absolute 0 1px 0);
///   @include position(absolute 0 1px 0 null);
///   @include position(absolute 0 1px 0 1px 1);
@mixin position($props: []) {
  // Autocomplete purpose.
}

/// Shorthand mixin for position property.
/// @param {String} $position - Position (`relative`, `absolute`, etc.)
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include position(absolute)
///   @include position(absolute, 0, null);
///   @include position(absolute, 0, 1px, 0);
///   @include position(absolute, 0, 1px, 0, null);
///   @include position(absolute, 0, 1px, 0, 1px, 1);
///   @include position($position: absolute, $top: 0, $z-index: 1);
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $z-index: null) {
  @if list.has-multiple($top) {
    @include position($position, $top...);
  } @else {
    position: $position;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
    z-index: $z-index;
  }
}

/// Shorthand mixin for relative position.
/// @param {List} $props - Position Props
/// @example
///   @include relative
///   @include relative(0 null);
///   @include relative(0 1px 0);
///   @include relative(0 1px 0 null);
///   @include relative(0 1px 0 1px 1);
@mixin relative($props: []) {
  // Autocomplete purpose.
}

/// Shorthand mixin for relative position.
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include relative
///   @include relative(0, null);
///   @include relative(0, 1px 0);
///   @include relative(0, 1px 0 null);
///   @include relative(0, 1px 0 1px 1);
///   @include relative($top: 0, $z-index: 1);
@mixin relative($top: null, $right: null, $bottom: null, $left: null, $z-index: null) {
  @include position(relative, $top, $right, $bottom, $left, $z-index);
}

/// Shorthand mixin for absolute position.
/// @param {List} $props - Position Props
/// @example
///   @include absolute
///   @include absolute(0 null);
///   @include absolute(0 1px 0);
///   @include absolute(0 1px 0 null);
///   @include absolute(0 1px 0 1px 1);
@mixin absolute($props: []) {
  // Autocomplete purpose.
}

/// Shorthand mixin for absolute position.
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include absolute
///   @include absolute(0, null);
///   @include absolute(0, 1px 0);
///   @include absolute(0, 1px 0 null);
///   @include absolute(0, 1px 0 1px 1);
///   @include absolute($top: 0, $z-index: 1);
@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $z-index: null) {
  @include position(absolute, $top, $right, $bottom, $left, $z-index);
}

/// Shorthand to cover the parent container using absolute.
/// @param {List} $props - Cover Props
/// @example
///   @include absolute-cover(10px 2)
@mixin absolute-cover($props...) {
  // Autocomplete purpose
}

/// Shorthand to cover the parent container using absolute.
/// @param {Length} $offset [0] - Offset
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include absolute-cover
///   @include absolute-cover(10px)
///   @include absolute-cover(10px, 2)
@mixin absolute-cover($offset: 0, $z-index: null) {
  @if list.has-multiple($offset) {
    @include absolute-cover($offset...);
  } @else {
    @include absolute($offset, $offset, $offset, $offset, $z-index);
  }
}

/// Shorthand to align at center in parent container using absolute.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include absolute-center
///   @include absolute-center(1)
@mixin absolute-center($z-index: null) {
  transform: translate(-50%, -50%);
  @include absolute($top: 50%, $left: 50%, $z-index: $z-index);
}

/// Shorthand to align at top-left in parent container using absolute.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include absolute-top-left
///   @include absolute-top-left(1)
@mixin absolute-top-left($z-index: null) {
  @include absolute($top: 0, $left: 0, $z-index: $z-index);
}

/// Shorthand to align at top-right in parent container using absolute.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include absolute-top-right
///   @include absolute-top-right(1)
@mixin absolute-top-right($z-index: null) {
  @include absolute($top: 0, $right: 0, $z-index: $z-index);
}

/// Shorthand to align at bottom-left in parent container using absolute.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include absolute-bottom-left
///   @include absolute-bottom-left(1)
@mixin absolute-bottom-left($z-index: null) {
  @include absolute($bottom: 0, $left: 0, $z-index: $z-index);
}

/// Shorthand to align at bottom-right in parent container using absolute.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include absolute-bottom-right
///   @include absolute-bottom-right(1)
@mixin absolute-bottom-right($z-index: null) {
  @include absolute($bottom: 0, $right: 0, $z-index: $z-index);
}

/// Shorthand mixin for fixed position.
/// @param {List} $props - Position Props
/// @example
///   @include fixed
///   @include fixed(0 null);
///   @include fixed(0 1px 0);
///   @include fixed(0 1px 0 null);
///   @include fixed(0 1px 0 1px 1);
@mixin fixed($props: []) {
  // Autocomplete purpose
}

/// Shorthand mixin for fixed position.
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include fixed
///   @include fixed(0, null);
///   @include fixed(0, 1px 0);
///   @include fixed(0, 1px 0 null);
///   @include fixed(0, 1px 0 1px 1);
///   @include fixed($top: 0, $z-index: 1);
@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $z-index: null) {
  @include position(fixed, $top, $right, $bottom, $left, $z-index);
}

/// Shorthand to cover the parent container using fixed.
/// @param {List} $props - Cover Props
/// @example
///   @include fixed-cover(10px 2)
@mixin fixed-cover($props...) {
  // Autocomplete purpose
}

/// Shorthand to cover the parent container using fixed.
/// @param {Length} $offset [0] - Offset
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include fixed-cover
///   @include fixed-cover(10px)
///   @include fixed-cover(10px, 2)
@mixin fixed-cover($offset: 0, $z-index: null) {
  @if list.has-multiple($offset) {
    @include fixed-cover($offset...);
  } @else {
    @include fixed($offset, $offset, $offset, $offset, $z-index);
  }
}

/// Shorthand to align at center in parent container using fixed.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include fixed-center
///   @include fixed-center(1)
@mixin fixed-center($z-index: null) {
  transform: translate(-50%, -50%);
  @include fixed($top: 50%, $left: 50%, $z-index: $z-index);
}

/// Shorthand to align at top-left in parent container using fixed.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include fixed-top-left
///   @include fixed-top-left(1)
@mixin fixed-top-left($z-index: null) {
  @include fixed($top: 0, $left: 0, $z-index: $z-index);
}

/// Shorthand to align at top-right in parent container using fixed.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include fixed-top-right
///   @include fixed-top-right(1)
@mixin fixed-top-right($z-index: null) {
  @include fixed($top: 0, $right: 0, $z-index: $z-index);
}

/// Shorthand to align at bottom-left in parent container using fixed.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include fixed-bottom-left
///   @include fixed-bottom-left(1)
@mixin fixed-bottom-left($z-index: null) {
  @include fixed($bottom: 0, $left: 0, $z-index: $z-index);
}

/// Shorthand to align at bottom-right in parent container using fixed.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include fixed-bottom-right
///   @include fixed-bottom-right(1)
@mixin fixed-bottom-right($z-index: null) {
  @include fixed($bottom: 0, $right: 0, $z-index: $z-index);
}

/// Shorthand mixin for sticky position.
/// @param {List} $props - Position Props
/// @example
///   @include sticky
///   @include sticky(0 null);
///   @include sticky(0 1px 0);
///   @include sticky(0 1px 0 null);
///   @include sticky(0 1px 0 1px 1);
@mixin sticky($props: []) {
  // Autocomplete purpose
}

/// Shorthand mixin for sticky position.
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include sticky
///   @include sticky(0, null);
///   @include sticky(0, 1px 0);
///   @include sticky(0, 1px 0 null);
///   @include sticky(0, 1px 0 1px 1);
///   @include sticky($top: 0, $z-index: 1);
@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $z-index: null) {
  @include position(sticky, $top, $right, $bottom, $left, $z-index);
}

/// Shorthand to cover the parent container using sticky.
/// @param {List} $props - Cover Props
/// @example
///   @include sticky-cover(10px 2)
@mixin sticky-cover($props...) {
  // Autocomplete purpose
}

/// Shorthand to cover the parent container using sticky.
/// @param {Length} $offset [0] - Offset
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include sticky-cover
///   @include sticky-cover(10px)
///   @include sticky-cover(10px, 2)
@mixin sticky-cover($offset: 0, $z-index: null) {
  @if list.has-multiple($offset) {
    @include sticky-cover($offset...);
  } @else {
    @include sticky($offset, $offset, $offset, $offset, $z-index);
  }
}

/// Shorthand to align at center in parent container using sticky.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include sticky-center
///   @include sticky-center(1)
@mixin sticky-center($z-index: null) {
  transform: translate(-50%, -50%);
  @include sticky($top: 50%, $left: 50%, $z-index: $z-index);
}

/// Shorthand to align at top-left in parent container using sticky.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include sticky-top-left
///   @include sticky-top-left(1)
@mixin sticky-top-left($z-index: null) {
  @include sticky($top: 0, $left: 0, $z-index: $z-index);
}

/// Shorthand to align at top-right in parent container using sticky.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include sticky-top-right
///   @include sticky-top-right(1)
@mixin sticky-top-right($z-index: null) {
  @include sticky($top: 0, $right: 0, $z-index: $z-index);
}

/// Shorthand to align at bottom-left in parent container using sticky.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include sticky-bottom-left
///   @include sticky-bottom-left(1)
@mixin sticky-bottom-left($z-index: null) {
  @include sticky($bottom: 0, $left: 0, $z-index: $z-index);
}

/// Shorthand to align at bottom-right in parent container using sticky.
/// @param {Number} $z-index [null] - Stack order
/// @example
///   @include sticky-bottom-right
///   @include sticky-bottom-right(1)
@mixin sticky-bottom-right($z-index: null) {
  @include sticky($bottom: 0, $right: 0, $z-index: $z-index);
}
