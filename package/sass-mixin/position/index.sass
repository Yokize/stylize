@use '~@stylize/sass-func/meta'
@use '~@stylize/sass-func/list'
@use '../z-index' as *

////
/// @group position
/// @author Nojukubi
/// @source https://developer.mozilla.org/en-US/docs/Web/CSS/position
////

/// Shorthand mixin for position property.
/// @param {List} $args Position Args.
/// @example
///   position(absolute)
///   position(absolute null 0)
///   position(absolute 0 1px 0)
///   position(absolute 0 1px null 0)
///   position(absolute 0 1px null 1px 1)
///   position(absolute 0 1px null 1px header)
=position($args: [])

/// Shorthand mixin for position property.
/// @param {String} $position Position.
/// @param {Length} $top [null] Top offset.
/// @param {Length} $right [null] Right offset.
/// @param {Length} $bottom [null] Bottom offset.
/// @param {Length} $left [null] Left offset.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   position(absolute)
///   position(absolute, null, 0)
///   position(absolute, 0, 1px, 0)
///   position(absolute, 0, 1px, null, 0)
///   position(absolute, 0, 1px, null, 1px, 1)
///   position(absolute, 0, 1px, null, 1px, header)
///   position($position: absolute, $top: 0, $z: 1)
=position($position, $top: null, $right: null, $bottom: null, $left: null, $z: null)
  @if list.has-single($position)
    +-position-($position, $top, $right, $bottom, $left, $z)
  @else
    +-position-($position...)

/// Shorthand mixin for relative position.
/// @param {List} $args Position Args.
/// @example
///   relative
///   relative(0 null)
///   relative(0 1px 0)
///   relative(0 1px null 1px)
///   relative(0 1px null 1px 1)
///   relative(0 1px null 1px header)
=relative($args: [])

/// Shorthand mixin for relative position.
/// @param {Length} $top [null] Top offset.
/// @param {Length} $right [null] Right offset.
/// @param {Length} $bottom [null] Bottom offset.
/// @param {Length} $left [null] Left offset.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   relative
///   relative(null, 0)
///   relative(0, 1px, 0)
///   relative(0, 1px, null, 0)
///   relative(0, 1px, null, 1px, 1)
///   relative(0, 1px, null, 1px, header)
///   relative($top: 0, $left: 0, $z: header)
=relative($top: null, $right: null, $bottom: null, $left: null, $z: null)
  @if list.has-single($top)
    +-position-(relative, $top, $right, $bottom, $left, $z)
  @else
    +-position-(relative, $top...)

/// Shorthand mixin for absolute position.
/// @param {List} $args Position Args.
/// @example
///   absolute
///   absolute(null 0)
///   absolute(0 1px 0)
///   absolute(0 1px null 1px)
///   absolute(0 1px null 1px 1)
///   absolute(0 1px null 1px header)
=absolute($args: [])

/// Shorthand mixin for absolute position.
/// @param {Length} $top [null] Top offset.
/// @param {Length} $right [null] Right offset.
/// @param {Length} $bottom [null] Bottom offset.
/// @param {Length} $left [null] Left offset.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   absolute
///   absolute(null, 0)
///   absolute(0, 1px, 0)
///   absolute(0, 1px, null, 0)
///   absolute(0, 1px, null, 1px, 1)
///   absolute(0, 1px, null, 1px, header)
///   absolute($top: 0, $left: 0, $z: header)
=absolute($top: null, $right: null, $bottom: null, $left: null, $z: null)
  @if list.has-single($top)
    +-position-(absolute, $top, $right, $bottom, $left, $z)
  @else
    +-position-(absolute, $top...)

/// Shorthand to cover the parent container using absolute.
/// @param {List} $args Cover Args.
/// @example
///   absolute-cover(10px 2)
///   absolute-cover(10px header)
=absolute-cover($args: [])

/// Shorthand to cover the parent container using absolute.
/// @param {Length} $offset [0] Offset.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   absolute-cover
///   absolute-cover(10px)
///   absolute-cover(10px, 2)
///   absolute-cover(10px, header)
=absolute-cover($offset: 0, $z: null)
  @if list.has-single($offset)
    +-position-(absolute, $offset, $offset, $offset, $offset, $z)
  @else
    +absolute-cover($offset...)

/// Shorthand to align at center in parent container using absolute.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   absolute-center
///   absolute-center(1)
///   absolute-center(header)
=absolute-center($z: null)
  transform: translate(-50%, -50%)
  +-position-(absolute, $top: 50%, $left: 50%, $z: $z)

/// Shorthand to align at top-left in parent container using absolute.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   absolute-top-left
///   absolute-top-left(1)
///   absolute-top-left(header)
=absolute-top-left($z: null)
  +-position-(absolute, $top: 0, $left: 0, $z: $z)

/// Shorthand to align at top-right in parent container using absolute.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   absolute-top-right
///   absolute-top-right(1)
///   absolute-top-right(header)
=absolute-top-right($z: null)
  +-position-(absolute, $top: 0, $right: 0, $z: $z)

/// Shorthand to align at bottom-left in parent container using absolute.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   absolute-bottom-left
///   absolute-bottom-left(1)
///   absolute-bottom-left(header)
=absolute-bottom-left($z: null)
  +-position-(absolute, $bottom: 0, $left: 0, $z: $z)

/// Shorthand to align at bottom-right in parent container using absolute.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   absolute-bottom-right
///   absolute-bottom-right(1)
///   absolute-bottom-right(header)
=absolute-bottom-right($z: null)
  +-position-(absolute, $bottom: 0, $right: 0, $z: $z)

/// Shorthand mixin for fixed position.
/// @param {List} $args Position Args.
/// @example
///   fixed
///   fixed(null 0)
///   fixed(0 1px 0)
///   fixed(0 1px null 0)
///   fixed(0 1px null 1px 1)
///   fixed(0 1px null 1px header)
=fixed($args: [])

/// Shorthand mixin for fixed position.
/// @param {Length} $top [null] Top offset.
/// @param {Length} $right [null] Right offset.
/// @param {Length} $bottom [null] Bottom offset.
/// @param {Length} $left [null] Left offset.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   fixed
///   fixed(null, 0)
///   fixed(0, 1px, 0)
///   fixed(0, 1px, null, 0)
///   fixed(0, 1px, null, 1px, 1)
///   fixed(0, 1px, null, 1px, header)
///   fixed($top: 0, $left: 0, $z: header)
=fixed($top: null, $right: null, $bottom: null, $left: null, $z: null)
  @if list.has-single($top)
    +-position-(fixed, $top, $right, $bottom, $left, $z)
  @else
    +-position-(fixed, $top...)

/// Shorthand to cover the parent container using fixed.
/// @param {List} $args Cover Args.
/// @example
///   fixed-cover(10px 2)
///   fixed-cover(10px header)
=fixed-cover($args: [])

/// Shorthand to cover the parent container using fixed.
/// @param {Length} $offset [0] Offset.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   fixed-cover
///   fixed-cover(10px)
///   fixed-cover(10px, 2)
///   fixed-cover(10px, header)
=fixed-cover($offset: 0, $z: null)
  @if list.has-single($offset)
    +-position-(fixed, $offset, $offset, $offset, $offset, $z)
  @else
    +fixed-cover($offset...)

/// Shorthand to align at center in parent container using fixed.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   fixed-center
///   fixed-center(1)
///   fixed-center(header)
=fixed-center($z: null)
  transform: translate(-50%, -50%)
  +-position-(fixed, $top: 50%, $left: 50%, $z: $z)

/// Shorthand to align at top-left in parent container using fixed.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   fixed-top-left
///   fixed-top-left(1)
///   fixed-top-left(header)
=fixed-top-left($z: null)
  +-position-(fixed, $top: 0, $left: 0, $z: $z)

/// Shorthand to align at top-right in parent container using fixed.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   fixed-top-right
///   fixed-top-right(1)
///   fixed-top-right(header)
=fixed-top-right($z: null)
  +-position-(fixed, $top: 0, $right: 0, $z: $z)

/// Shorthand to align at bottom-left in parent container using fixed.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   fixed-bottom-left
///   fixed-bottom-left(1)
///   fixed-bottom-left(header)
=fixed-bottom-left($z: null)
  +-position-(fixed, $bottom: 0, $left: 0, $z: $z)

/// Shorthand to align at bottom-right in parent container using fixed.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   fixed-bottom-right
///   fixed-bottom-right(1)
///   fixed-bottom-right(header)
=fixed-bottom-right($z: null)
  +-position-(fixed, $bottom: 0, $right: 0, $z: $z)

/// Shorthand mixin for sticky position.
/// @param {List} $args Position Args.
/// @example
///   sticky
///   sticky(null 0)
///   sticky(0 1px 0)
///   sticky(0 1px null 0)
///   sticky(0 1px null 1px 1)
///   sticky(0 1px null 1px header)
=sticky($args: [])

/// Shorthand mixin for sticky position.
/// @param {Length} $top [null] Top offset.
/// @param {Length} $right [null] Right offset.
/// @param {Length} $bottom [null] Bottom offset.
/// @param {Length} $left [null] Left offset.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   sticky
///   sticky(null, 0)
///   sticky(0, 1px, 0)
///   sticky(0, 1px, null, 0)
///   sticky(0, 1px, null, 1px, 1)
///   sticky(0, 1px, null, 1px, header)
///   sticky($top: 0, $left: 0, $z: header)
=sticky($top: null, $right: null, $bottom: null, $left: null, $z: null)
  @if list.has-single($top)
    +-position-(sticky, $top, $right, $bottom, $left, $z)
  @else
    +-position-(sticky, $top...)

/// Shorthand to cover the parent container using sticky.
/// @param {List} $args Cover Args.
/// @example
///   sticky-cover(10px 2)
///   sticky-cover(10px header)
=sticky-cover($args: [])

/// Shorthand to cover the parent container using sticky.
/// @param {Length} $offset [0] Offset.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   sticky-cover
///   sticky-cover(10px)
///   sticky-cover(10px, 2)
///   sticky-cover(10px, header)
=sticky-cover($offset: 0, $z: null)
  @if list.has-single($offset)
    +-position-(sticky, $offset, $offset, $offset, $offset, $z)
  @else
    +sticky-cover($offset...)

/// Shorthand to align at center in parent container using sticky.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   sticky-center
///   sticky-center(1)
///   sticky-center(header)
=sticky-center($z: null)
  transform: translate(-50%, -50%)
  +-position-(sticky, $top: 50%, $left: 50%, $z: $z)

/// Shorthand to align at top-left in parent container using sticky.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   sticky-top-left
///   sticky-top-left(1)
///   sticky-top-left(header)
=sticky-top-left($z: null)
  +-position-(sticky, $top: 0, $left: 0, $z: $z)

/// Shorthand to align at top-right in parent container using sticky.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   sticky-top-right
///   sticky-top-right(1)
///   sticky-top-right(header)
=sticky-top-right($z: null)
  +-position-(sticky, $top: 0, $right: 0, $z: $z)

/// Shorthand to align at bottom-left in parent container using sticky.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   sticky-bottom-left
///   sticky-bottom-left(1)
///   sticky-bottom-left(header)
=sticky-bottom-left($z: null)
  +-position-(sticky, $bottom: 0, $left: 0, $z: $z)

/// Shorthand to align at bottom-right in parent container using sticky.
/// @param {String|Number} $z [null] Stack order.
/// @example
///   sticky-bottom-right
///   sticky-bottom-right(1)
///   sticky-bottom-right(header)
=sticky-bottom-right($z: null)
  +-position-(sticky, $bottom: 0, $right: 0, $z: $z)

/// Internal mixin to generate position properties.
/// @param {String} $position Position.
/// @param {Length} $top [null] Top offset.
/// @param {Length} $right [null] Right offset.
/// @param {Length} $bottom [null] Bottom offset.
/// @param {Length} $left [null] Left offset.
/// @param {String|Number} $z [null] Stack order.
=-position-($position, $top: null, $right: null, $bottom: null, $left: null, $z: null)
  position: $position
  top: $top
  right: $right
  bottom: $bottom
  left: $left

  @if meta.is-number($z)
    z-index: $z

  @else if meta.is-string($z)
    +z-index($z)
