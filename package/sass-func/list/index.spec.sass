@use 'sass:meta'
@use '~sass-true' as test
@use './index' as list

// Fixture: map func.
@function double($item)
  @return $item * 2

// Fixture: predicate.
@function is-number($value)
  @return meta.type-of($value) == 'number'

@include test.describe('List')
  @include test.describe('chunk')
    @include test.it('should split list into chunks based on size')
      $output: (item1 item2) (item3 item4)
      @include test.assert-equal(list.chunk(item1 item2 item3 item4, 2), $output)

    @include test.it('should create 1 chunk if size is less than length')
      $output: list.chunk(item1 item2, 3)
      @include test.assert-equal(list.nth($output, 1), (item1 item2))

  @include test.describe('contains')
    @include test.it('should return true in case item found in the list')
      @include test.assert-equal(list.contains(item1 item2, item1), true)

    @include test.it('should return false in case item not found in the list')
      @include test.assert-equal(list.contains(item1 item2, item3), false)

  @include test.describe('difference')
    @include test.it('should return difference between lists')
      $input: item1 item3, item3 item4, item3 item2
      @include test.assert-equal(list.difference($input...), item1 item4 item2)

    @include test.it('should return empty list in case no difference')
      $output: list.difference([item1 item2], [item1 item2])
      @include test.assert-equal(list.length($output), 0)

  @include test.describe('drop')
    @include test.it('should drop first item when number of items not defined')
      @include test.assert-equal(list.drop(item1 item2 item3), item2 item3)

    @include test.it('should drop certain number of items from beginning of the list')
      @include test.assert-equal(list.drop(item1 item2 item3 item4, 2), item3 item4)

  @include test.describe('every')
    @include test.it('should return true if predicate satisfy all items in the list')
      @include test.assert-equal(list.every(1 2, meta.get-function(is-number)), true)

    @include test.it('should return false if predicate fail for at least one item in the list')
      @include test.assert-equal(list.every(1 null, meta.get-function(is-number)), false)

  @include test.describe('fill')
    @include test.it('should fill out the list to certain number of items')
      @include test.assert-equal(list.fill(item1, 3, item3), item1 item3 item3)

    @include test.it('should fill out the empty list to certain number of items')
      @include test.assert-equal(list.fill([], 3, item), [item item item])

    @include test.it('should ignore list in case the amount is less or eq than its length')
      @include test.assert-equal(list.fill([item1 item2], 2, item), [item1 item2])

  @include test.describe('first')
    @include test.it('should get the first item on the list')
      @include test.assert-equal(list.first(item1 item2), item1)

  @include test.describe('flatten')
    @include test.it('should make the fully flatten the list')
      $input: item1 (item2 item3) item4 item5
      $output: item1 item2 item3 item4 item5
      @include test.assert-equal(list.flatten($input), $output)

    @include test.it('should make the flatten to the depth level')
      $input: item1 (item2 (item3 item4)) item5
      $output: item1 item2 (item3 item4) item5
      @include test.assert-equal(list.flatten($input, 1), $output)

  @include test.describe('has-multiple')
    @include test.it('should return false in case the list is empty')
      @include test.assert-equal(list.has-multiple([]), false)

    @include test.it('should return false in case single item in the list')
      @include test.assert-equal(list.has-multiple(item), false)

    @include test.it('should return true in case multiple items in the list')
      @include test.assert-equal(list.has-multiple(item1 item2), true)

  @include test.describe('has-single')
    @include test.it('should return false in case the list is empty')
      @include test.assert-equal(list.has-single([]), false)

    @include test.it('should return true in case single item in the list')
      @include test.assert-equal(list.has-single(item), true)

    @include test.it('should return false in case multiple items in the list')
      @include test.assert-equal(list.has-single(item1 item2), false)

  @include test.describe('insert-nth')
    @include test.it('should insert value to the list at index')
      @include test.assert-equal(list.insert-nth(item1 item3, 2, item2), item1 item2 item3)

  @include test.describe('intersection')
    @include test.it('should return intersections between lists')
      $input: item1 item3, item1 item2 item3, item1 item3 item4
      @include test.assert-equal(list.intersection($input...), item1 item3)

    @include test.it('should return empty list in case no intersection')
      $output: list.intersection([item1 item2], [item3 item4])
      @include test.assert-equal(list.length($output), 0)

  @include test.describe('is-empty')
    @include test.it('should return true in case the list is empty')
      @include test.assert-equal(list.is-empty([]), true)

    @include test.it('should return true in case the list has items')
      @include test.assert-equal(list.is-empty(item), false)

  @include test.describe('last')
    @include test.it('should get the last item on the list')
      @include test.assert-equal(list.last(item1 item2), item2)

  @include test.describe('last-index')
    @include test.it('should get the last index of item in the list')
      @include test.assert-equal(list.last-index(item1 item1 item2, item1), 2)

    @include test.it('should return null in case the list is empty')
      @include test.assert-equal(list.last-index((), item1), null)

    @include test.it('should return null in case the item is not found')
      @include test.assert-equal(list.last-index((item1 item2), item3), null)

  @include test.describe('map')
    @include test.it('should iterate the list and call the function on each item')
      @include test.assert-equal(list.map(1 2, meta.get-function(double)), 2 4)

  @include test.describe('prepend')
    @include test.it('should prepend item to the list')
      @include test.assert-equal(list.prepend(item1, item2), item2 item1)

    @include test.it('should prepend item to the list with separator')
      @include test.assert-equal(list.prepend([item1], item2, comma), [item2, item1])

  @include test.describe('range')
    @include test.it('should create a list with a specified range')
      @include test.assert-equal(list.range(3), 1 2 3)

  @include test.describe('remove')
    @include test.it('should remove item from the list')
      @include test.assert-equal(list.remove(item1 item2 item3, item1), item2 item3)

    @include test.it('should ignore in case the item is not found')
      @include test.assert-equal(list.remove(item1 item2, item3), item1 item2)

    @include test.it('should remove all found items from the list')
      @include test.assert-equal(list.remove(item1 item1 item2 item3, item1), item2 item3)

  @include test.describe('remove-nth')
    @include test.it('should remove first item from the list')
      @include test.assert-equal(list.remove-nth(item1 item2 item3, 1), item2 item3)

    @include test.it('should remove item under index from the list')
      @include test.assert-equal(list.remove-nth(item1 item2 item3, 2), item1 item3)

    @include test.it('should remove the last item from the list')
      @include test.assert-equal(list.remove-nth(item1 item2 item3, 3), item1 item2)

  @include test.describe('reverse')
    @include test.it('should reverse the list from end to start')
      @include test.assert-equal(list.reverse(item1 item2 item3), item3 item2 item1)
      @include test.assert-equal(list.reverse([item1, item2, item3]), [item3, item2, item1])

  @include test.describe('slice')
    @include test.it('should slice list between start and end')
      @include test.assert-equal(list.slice(item1 item2 item3, 2), item2 item3)
      @include test.assert-equal(list.slice(item1 item2 item3, 1, 2), item1 item2)

  @include test.describe('some')
    @include test.it('should return true if predicate satisfy at least one item in the list')
      @include test.assert-equal(list.some(1 null, meta.get-function(is-number)), true)

    @include test.it('should return false if predicate is not satisfied by items in the list')
      @include test.assert-equal(list.some('1' null, meta.get-function(is-number)), false)

  @include test.describe('tail')
    @include test.it('should return all items except the first')
      @include test.assert-equal(list.tail(item1 item2 item3), item2 item3)

  @include test.describe('take')
    @include test.it('should return first item when number of items not defined')
      $output: list.take([item1 item2 item3])
      @include test.assert-equal(list.length($output), 1)

    @include test.it('should return first n items from the beginning of the list')
      @include test.assert-equal(list.take(item1 item2 item3, 2), item1 item2)

  @include test.describe('to-string')
    @include test.it('should joins all the items of the list')
      @include test.assert-equal(list.to-string(item1 item2), 'item1item2')

    @include test.it('should joins all the items of the list with glue')
      @include test.assert-equal(list.to-string(item1 item2, '/'), 'item1/item2')

    @include test.it('should joins all the items of the nested list with glue')
      @include test.assert-equal(list.to-string(item1 (item2 item3), '/'), 'item1/item2/item3')

  @include test.describe('unique')
    @include test.it('should remove duplicate values from list')
      @include test.assert-equal(list.unique(item1 item2 item1), item1 item2)
