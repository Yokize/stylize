@use 'sass:meta'
@use '~sass-true' as test
@use './index' as list

@function -map-($item)
  @return if($item, $item * 2, $item)

@include test.describe('List')
  @include test.describe('chunk')
    @include test.it('should split list into chunks based on size')
      $result: (item1 item2) (item3 item4)
      @include test.assert-equal(list.chunk(item1 item2 item3 item4, 2), $result)

    @include test.it('should return list in case size is less than length')
      $result: (item1 item2)
      @include test.assert-equal(list.chunk(item1 item2, 2), $result)

  @include test.describe('contains')
    @include test.it('should determine whether the list contains the item')
      @include test.assert-equal(list.contains(item1 item2, item1), true)

    @include test.it('should return false in case item not found in the list')
      @include test.assert-equal(list.contains(item1 item2, item3), false)

  @include test.describe('difference')
    @include test.it('should returns difference between lists')
      @include test.assert-equal(list.difference(item1 item2 item3, item3 item4), item1 item2)

  @include test.describe('each')
    @include test.it('should iterate through the list and call the function on each item')
      @include test.assert-equal(list.each(1 2, meta.get-function(-map-)), 2 4)

  @include test.describe('every')
    @include test.it('should determine if predicate returns true for all items in the list')
      @include test.assert-equal(list.every(1 2, meta.get-function(-map-)), true)
      @include test.assert-equal(list.every(1 null, meta.get-function(-map-)), false)

  @include test.describe('fill')
    @include test.it('should fill out the list with a certain number of items')
      @include test.assert-equal(list.fill(item1 item2, 4, item3), item1 item2 item3 item3)

  @include test.describe('first')
    @include test.it('should get the first item on the list')
      @include test.assert-equal(list.first(item1 item2), item1)

  @include test.describe('last')
    @include test.it('should get the last item on the list')
      @include test.assert-equal(list.last(item1 item2), item2)

  @include test.describe('last-index')
    @include test.it('should get the last index of item on the list')
      @include test.assert-equal(list.last-index(item1 item1 item2, item1), 2)

  @include test.describe('flatten')
    @include test.it('should make the list flattened to the specified depth level')
      @include test.assert-equal(list.flatten(1 (2 3) 4 5), 1 2 3 4 5)

  @include test.describe('has-multiple')
    @include test.it('should determine whether there is multiple items in the list')
      @include test.assert-equal(list.has-multiple(item1 item2), true)
      @include test.assert-equal(list.has-multiple(item), false)

  @include test.describe('insert-nth')
    @include test.it('should insert value to the list at index')
      @include test.assert-equal(list.insert-nth(item1 item3, 2, item2), item1 item2 item3)

  @include test.describe('intersection')
    @include test.it('should returns intersections between lists')
      @include test.assert-equal(list.intersection(item1 item3, item1 item2 item3), item1 item3)

  @include test.describe('is-empty')
    @include test.it('should determine whether the list is empty')
      @include test.assert-equal(list.is-empty(()), true)
      @include test.assert-equal(list.is-empty(item), false)

  @include test.describe('is-single')
    @include test.it('should determine whether there is only one item in the list')
      @include test.assert-equal(list.is-single(item), true)
      @include test.assert-equal(list.is-single(item1 item2), false)

  @include test.describe('prepend')
    @include test.it('should prepend an $item to the list')
      @include test.assert-equal(list.prepend(item1, item2), item2 item1)

  @include test.describe('range')
    @include test.it('should create a list with a specified range')
      @include test.assert-equal(list.range(3), 1 2 3)

  @include test.describe('remove-nth')
    @include test.it('should remove first item from the list')
      @include test.assert-equal(list.remove-nth(item1 item2 item3, 1), item2 item3)

    @include test.it('should remove item under index from the list')
      @include test.assert-equal(list.remove-nth(item1 item2 item3, 2), item1 item3)

    @include test.it('should remove last item from the list')
      @include test.assert-equal(list.remove-nth(item1 item2 item3, 3), item1 item2)

  @include test.describe('slice')
    @include test.it('should slice list between start and end')
      @include test.assert-equal(list.slice(item1 item2 item3, 2), item2 item3)
      @include test.assert-equal(list.slice(item1 item2 item3, 1, 2), item1 item2)

  @include test.describe('to-string')
    @include test.it('should joins all the items of the list with glue')
      @include test.assert-equal(list.to-string(item1 item2), 'item1item2')
      @include test.assert-equal(list.to-string(item1 item2, '/'), 'item1/item2')

  @include test.describe('unique')
    @include test.it('should removes duplicate values from list')
      @include test.assert-equal(list.unique(item1 item2 item1), item1 item2)
