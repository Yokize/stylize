@use 'sass:math'
@use '../map'
@use '../meta'
@use '../string'

////
/// @group unit
/// @author Nojukubi
////

/// Internal cache.
/// @type Map
$-cache-: ()

/// Base size for units.
/// @type Number
$base-size: 16px !default

/// Units of measurement for Time.
/// @type List
$unit-time: 1s 1ms 1%

/// Units of measurement for Angle.
/// @type List
$unit-angle: 1deg 1grad 1rad 1turn 1%

/// Units of measurement for Frequency.
/// @type List
$unit-frequency: 1hz 1khz 1%

/// Units of measurement for Resolution.
/// @type List
$unit-resolution: 1dpi 1dpcm 1dppx 1x

/// Units of measurement for Length.
/// @type List
$unit-length: 1mm 1cm 1in 1px 1pt 1pc 1em 1ex 1ch 1rem 1vw 1vh 1vmin 1vmax 1%

/// All supported unit of measurements.
/// @type List
$units: $unit-time, $unit-angle, $unit-frequency, $unit-resolution, $unit-length

/// Determine whether valid unit.
/// @param {String} $unit Unit to check.
/// @return {Boolean} Is valid unit.
/// @example
///   is(px)
@function is($unit)
  @return meta.is-number(-get-unit-($unit))

/// Get the unit from the $number.
/// @param {Number} $number Number.
/// @return {String} Number unit.
/// @example
///   get(1px)
@function get($number)
  @return math.unit($number)

/// Add the $unit to the $number.
/// @param {Number} $number Number.
/// @param {String} $unit Name of the unit.
/// @return {Number} Number with the unit.
/// @throws Unknown unit parameter.
/// @example
///   add(1, px)
///   add(1, dpi)
@function add($number, $unit)
  @if not is($unit)
    @error '`#{$unit}` is unknown unit'
  // To add unit to number need to multiply by 1<unit>.
  @return $number * -get-unit-($unit)

/// Remove the unit from the number.
/// @param {Number} $number Number to strip.
/// @return {Number} Unitless number.
/// @example
///   strip(1px)
@function strip($number)
  @if meta.is-number($number) and not math.is-unitless($number)
    @return math.div($number, ($number * 0 + 1))
  @return $number

/// Convert the units to the em.
/// @param {Number} $number Number to convert.
/// @return {Number} Number with em units.
/// @throws Number parameter has not valid unit.
/// @example
///   em(16px)
///   em(16px, 12px)
@function em($number, $base: $base-size)
  $unit: math.unit($number)
  @if $unit == 'px'
    @return math.div($number, $base) * 1em
  @else if $unit == 'em'
    @return $number
  @else
    @error 'Unit `#{$unit}` is not supported'

/// Convert the units to the rem.
/// @param {Number} $number Number to convert.
/// @return {Number} Number with rem units.
/// @throws Number parameter has not valid unit.
/// @example
///   rem(16px)
///   rem(16px, 12px)
@function rem($number, $base: $base-size)
  $unit: math.unit($number)
  @if $unit == 'px'
    @return math.div($number, $base) * 1rem
  @else if $unit == 'rem'
    @return $number
  @else
    @error 'Unit `#{$unit}` is not supported'

/// Get unit in the numeric type by the name.
/// @param {String} $unit Unit name.
/// @return {String} Unit numeric type.
@function -get-unit-($unit)
  $mapping: ()
  // In case cache do not have it need to create it.
  @if not map.has-key($-cache-, $unit)
    @each $block in $units
      @each $num-unit in $block
        $unit-str: string.slice(meta.inspect($num-unit), 2)
        $mapping: map.set($mapping, string.quote($unit-str), $num-unit)
    // Set variable under global internal cache.
    $-cache-: map.merge($-cache-, $mapping) !global
  @return map.get($-cache-, $unit)
