@use 'sass:list'
@use 'sass:string'

////
/// @group string
/// @author Nojukubi
/// @source https://sass-lang.com/documentation/modules/string
////

/// Forward built-in module.
@forward 'sass:string'

/// Drop $n chars from beginning of the string.
/// @param {String} $string String to slice.
/// @param {Number} $n Number of chars.
/// @return {String} Fragment of the string.
///   drop('search-string', 5)
@function drop($string, $n: 1)
  @return string.slice($string, $n + 1)

/// Replace $search with $replace in $string.
/// @param {String} $string String in which to replace.
/// @param {String} $search Substring to find and replace.
/// @param {String} $replace [''] New value.
/// @return {String} String with replacement.
/// @example
///   replace('search-string', '-string')
///   replace('search-string', '-string', '-str')
@function replace($string, $search, $replace: '')
  $index: string.index($string, $search)
  @if $index != null
    $before: string.slice($string, 1, $index - 1)
    $after: string.slice($string, $index + string.length($search))
    @return $before + $replace + replace($after, $search, $replace)
  @return $string

/// Split $string with $separator into substrings.
/// @param {String} $string String to split.
/// @param {String} $separator String separator.
/// @return {List | String} List of substrings.
/// @example
///   split('-str1-str2-', '-')
@function split($string, $separator)
  $index: string.index($string, $separator)
  @if $index != null
    $before: string.slice($string, 1, $index - 1)
    $after: string.slice($string, $index + string.length($separator))
    @return list.join($before, split($after, $separator))
  @return $string

/// Get first $n chars from the $string.
/// @param {List} $list String to slice.
/// @param {Number} $n Number of chars.
/// @return {List} Fragment of the string.
///   take(string, 2)
@function take($string, $n: 1)
  @return string.slice($string, 1, $n)

/// Removes leading and trailing $char from $string.
/// @param {String} $string String to trim.
/// @return {String} Trimmed string from char.
/// @example
///   trim(' string ')
///   trim('-string-', '-')
@function trim($string, $char: ' ')
  @return trim-start(trim-end($string, $char), $char)

/// Removes trailing $char from $string.
/// @param {String} $string String to trim.
/// @return {String} Trimmed string from char.
/// @example
///   trim-end('string ')
///   trim-end('string-', '-')
@function trim-end($string, $char: ' ')
  @if (string.slice($string, string.length($string), -1) == $char)
    @return trim-end(string.slice($string, 1, -2))
  @else
    @return $string

/// Removes leading $char from $string.
/// @param {String} $string String to trim.
/// @return {String} Trimmed string from char.
/// @example
///   trim-start(' string')
///   trim-start('-string', '-')
@function trim-start($string, $char: ' ')
  @if (string.slice($string, 1, 1) == $char)
    @return trim-start(string.slice($string, 2))
  @else
    @return $string

