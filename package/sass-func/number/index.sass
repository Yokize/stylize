@use '../map'
@use '../math'
@use '../meta'
@use '../unit'
@use '../string'

////
/// @group number
/// @author Nojukubi
////

/// Internal cache.
/// @type Map
$-cache-: ()

/// Parse string and create the number.
/// @param {Anything} $value Value to parse.
/// @return {Number} Number; otherwise null.
/// @throws Value is not valid string type.
/// @example
///   parse('10')
///   parse('1px')
///   parse('20dpi')
@function parse($value)
  @if not meta.is-string($value)
    @error 'Can be parsed only string (#{$value})'
  // Clear value from redundant spaces.
  $value: string.trim($value)
  // Check if value have been in cache.
  @if map.has-key($-cache-, $value)
    @return map.get($-cache-, $value)

  $result: null
  $divider: 0
  $operator: string.take($value, 1)
  $negative: ($operator == '-')
  // Remove operator character from value.
  @if $operator == '+' or $operator == '-'
    $value: string.slice($value, 2)
  // Iterate each character and parse it.
  @for $i from 1 through string.length($value)
    $char-str: string.slice($value, $i, $i)
    $char-num: -get-number-($char-str)
    // In case the char is not a number stop parse.
    @if not (meta.is-number($char-num) or $char-str == '.')
      // If result is number add unit and operator.
      @if meta.is-number($result)
        $unit: string.slice($value, $i)
        @if $negative
          $result: $result * -1
        @if unit.is($unit)
          $result: unit.add($result, $unit)
      @return $result

    @if $result == null
      $result: 0

    @if $char-str == '.'
      $divider: 1
    @else if $divider == 0
      $result: $result * 10 + $char-num
    @else
      $divider: $divider * 10
      $result: $result + math.div($char-num, $divider)
  $result: if($negative, $result * -1, $result)
  $-cache-: map.set($-cache-, $value, $result)
  @return $result

/// Get the number in the numeric type by the string.
/// @param {String} $num-str Digit in string type.
/// @return {String} Digit in numeric type.
@function -get-number-($num-str)
  $mapping: ()
  // In case cache do not have it need to create it.
  @if not map.has-key($-cache-, $num-str)
    @for $num from 0 through 9
      $mapping: map.set($mapping, string.quote(#{$num}), $num)
    // Set variable under global internal cache.
    $-cache-: map.merge($-cache-, $mapping) !global
  @return map.get($-cache-, $num-str)
